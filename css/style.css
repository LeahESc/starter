/* 
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485 */



/*  this resets the browser so every browser displays the page the same way */
* {
    margin: 0;
    padding: 0;
    /* box-sizing: border-box changes the box model so borders and paddings are no longer added to the height/width */
    box-sizing: border-box;   
}

/* properties related to font are inherited so we're setting up inheritance here */
/* everything related to font we want to set up in the body */
body {
    font-family: "Lato";
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    /* padding gives the whole page a small white border */
    padding: 30px
}

.header {
    position: relative;
    /* this says 'at everypoint the height of this box should be 95% of the viewport */
    height: 95vh;
    background-image: 
    linear-gradient(
          to right bottom,  
         hsla(111, 55%, 64%, 0.801), 
         hsla(160, 64%, 43%, 0.801)), 
         url(../img/hero.jpg);
         /* cover fits the element into the width of the view port */
    background-size: cover;
    /* crops bottom when image is re-sized and responsive. */
    background-position: top;
    /* clip path allows us to clip off the bottom diagonal making it that cool polygon shape */
    /* polygon takes the four pairs of x,y coordinates where you want the box to be */
    /* top left corner will be the refernce or starting point so it's 0 0 */
    /* polygon(top-left x axis top-left y axis, top-right x top-right y, bottom-right x bottom-right y, bottom-left x bottom-left y */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%)

}

.logo-box{
    position: absolute;
    /* refernce point is the parent element that should have its position set to relative */
    top: 40px;
    left: 40px;
}

.logo{
    height: 35px;
}

.text-box{
    position: absolute;
    /* top and left percents are in relation to the parent element */
    top: 40%;
    left: 50%;
    /* transform:translate is referencing the element itselft */
    transform: translate(-50%, -50%);
    text-align: center;
    /* this centers the btn b/c the btn is inline-block which is treated like text */
}

.heading-primary{
    color: #fff;
    text-transform: uppercase;
    /* determines the backpart of an element when we transform it is visible ot the user */
    backface-visibility: hidden;
    margin-bottom: 60px
}
/* block elements occupy the entire witdth of the space they're placed in and also create line breaks */

.heading-primary-main{
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;

    animation-name: moveInLeft;
    animation-duration: 2s;
    /* animation-delay: 3s; */
    /* animation-iteration-count: 3; */
    /* ease-in starts animation off slower and then speeds up */
    animation-timing-function: ease-in;
}

.heading-primary-sub{
    display: block;
    font-size: 20px;
    font-weight: 700px;
    letter-spacing: 17.4px;
    animation: moveInRight 2s ease-in
}
/* animation for browsers it's best to only animate two properties: opacity and transform */
@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-100px) 
        /* rotate(0deg) */
    }

    /* 50% {
        transform: rotate(180deg);
    } */

    80% {
        transform: translateX(10px)

    }

    100% {
        opacity: 1;
        /* translate(0) makes it look the way it is originally coded to look */
        transform: translate(0);
    }   
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(100px)
    }

    80% {
        transform: translateX(-10px)

    }

    100% {
        opacity: 1;
        /* translate(0) makes it look the way it is originally coded to look */
        transform: translate(0);

    }
}
/* :link is a psuedo class -- it's a state of the button selector */
/* we use psuedo classes to style the button in a particular condition */
.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    display: inline-block;
    border-radius: 10px;
    /* transition has to be present in initial state */
    transition: all .2s;
}

.btn:hover {
    transform: translateY(-3px);
    /* off-set in x-direction y-direction blur color with opacity */
    box-shadow: 0 10px 20px rgba(0,0,0,.2)
}

.btn:active { 
    transform: translateY(-1px);
    box-shadow: 0 5px 10px rgba(0,0,0,.2)
}

.btn-white {
    background-color: white;
    color: #777;

}